<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: $ -->

<refentry xml:id="quickhashintstringhash.loadfromfile" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>QuickHashIntStringHash::loadFromFile</refname>
  <refpurpose>This factory method creates a hash from a file</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type>QuickHashIntStringHash</type><methodname>QuickHashIntStringHash::loadFromFile</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>integer</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   This factory method creates a new hash from a definition file on disk. The
   file format is as follows: an signed 32 bit integer containing -2 (fe ff ff
   ff), an unsigned 32 bit integer containing the number of element data to
   follow in characters. This element data contains all the strings. After the
   header and the strings, the elements follow in pairs of two unsigned 32 bit
   integers where the first one is the key, and the second one the index in
   the the element data string. An example could be:
  </para>
  <para>
   <example><![CDATA[00000000  fe ff ff ff 17 00 00 00  66 6f 75 72 74 79 20 74  |........fourty t|
00000010  68 72 65 65 00 66 69 66  74 79 20 74 77 6f 00 04  |hree.fifty two..|
00000020  00 00 00 00 00 00 00 04  00 00 00 0d 00 00 00     |...............|
0000002f]]></example>
  </para>
  <para>
   <example><![CDATA[
header signature:
00000000  fe ff ff ff

data string length:
00000004  17 00 00 00

data string:
00000000  66 6f 75 72 74 79 20 74  68 72 65 65 00 66 69 66
00000010  74 79 20 74 77 6f 00

key/value 1 (key = 4, index = 0 ("fourty three")):
04 00 00 00  00 00 00 00

key/value 2 (key = 5, index = 0d ("fifty two")):
05 00 00 00  0d 00 00 00
]]></example>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       The filename of the file to read the hash from.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       The same options that the class' contructor takes; except that the size
       option is ignored. It is automatically calculated to be the same as the
       number of entries in the hash, rounded up to the nearest power of two
       with a maximum limit of 4194304.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a new QuickHashIntStringHash.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>QuickHashIntStringHash::loadFromFile</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$file = dirname( __FILE__ ) . "/simple.string.hash";
$hash = QuickHashIntStringHash::loadFromFile(
    $file,
    QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC
);
foreach( range( 0, 0x0f ) as $key )
{
    printf( "Key %3d (%2x) is %s\n",
        $key, $key, 
        $hash->exists( $key ) ? 'set' : 'unset'
    );
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Key   0 ( 0) is unset
Key   1 ( 1) is set
Key   2 ( 2) is set
Key   3 ( 3) is set
Key   4 ( 4) is unset
Key   5 ( 5) is set
Key   6 ( 6) is unset
Key   7 ( 7) is set
Key   8 ( 8) is unset
Key   9 ( 9) is unset
Key  10 ( a) is unset
Key  11 ( b) is set
Key  12 ( c) is unset
Key  13 ( d) is set
Key  14 ( e) is unset
Key  15 ( f) is unset
]]>
    </screen>
   </example>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
